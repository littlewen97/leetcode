//169. 多数元素
//位运算，数组，分治算法
//给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数大于 ⌊ n / 2 ⌋ 的元素。
//你可以假设数组是非空的，并且给定的数组总是存在多数元素。
//示例 1 :
//输入: [3, 2, 3]
//输出 : 3
//
//摩尔投票法 Moore Voting，需要 O(n) 的时间和 O(1) 的空间
//先将第一个数字假设为过半数，然后把计数器设为1，比较下一个数和此数是否相等，若相等则计数器加一，反之减一。然后看此时计数器的值，若为零，则将下一个值设为候选过半数。以此类推直到遍历完整个数组，当前候选过半数即为该数组的过半数。
//前提是数组中一定要有过半数的存在
//如果计数器减到0了话，说明目前不是候选者数字的个数已经跟候选者的出现个数相同了，那么这个候选者已经很 weak，不一定能出现超过半数，此时选择更换当前的候选者。如果之前的候选者在后面大量出现的话，其又会重新变为候选者，直到最终验证成为正确的过半数

int majorityElement(vector<int>& nums) {
	int res = 0, count = 0;
	for (int i = 0; i < nums.size(); i++) {
		if (count == 0) {
			res = nums[i];
			count++;
		}
		else
			(res == nums[i]) ? count++ : count--;
	}
	return res;
}